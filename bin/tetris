#!/usr/bin/env ruby
$LOAD_PATH.unshift("#{File.dirname(__FILE__)}/../lib")
require "tetris"

Shoes.app width: 400, height: 620, resizable: false do
  background gray

  def rect_builder(*attrs)
    attrs.flatten!
    rect(attrs[0], attrs[1], attrs[2], attrs[3])
  end

  debugger = Proc.new do |message|
    debug message
  end

  render_map = Proc.new do |map|
    map.rendered.map!(&:remove).clear unless map.rendered.empty?

    map.grid.each_with_index do |row, row_index|
      row.each_with_index do |col, col_index|
        if col && col != @current_piece
          map.rendered << shape do
            fill col.color
            rect(col_index * map.unit_size, row_index * map.unit_size, map.unit_size, map.unit_size)
          end
        end
      end
    end
  end

  @map = Tetris::Map.new(render_map, debugger)

  shape do
    fill @map.background_color
    rect(@map.left, @map.top, @map.width * @map.unit_size, @map.height * @map.unit_size)
  end

  render_piece = Proc.new do |piece|
    piece.rendered.remove unless piece.rendered.nil?
    piece.rendered = shape do
      fill piece.color
      piece.shape.each_with_index do |row, y|
        row.each_with_index do |col, x|
          rect_builder(piece.block_attributes(x, y)) if col
        end
      end
    end
  end

  @anim = animate 1 do
    if @current_piece.nil? || @current_piece.blocked_down?
      @current_piece.rendered.remove if !@current_piece.nil? && @current_piece.blocked_down?
      @new_piece = Tetris::PieceFactory.build(@map, render_piece)
      @map.pieces << @new_piece
      @current_piece = @new_piece
      @map.render
      # @anim.stop and alert('Done!')
    else
      @current_piece.move_down
    end
    @map.update_rows
  end

  keypress do |key|
    if key == :left
      @current_piece.move_left
    elsif key == :right
      @current_piece.move_right
    elsif key == :up
      @current_piece.move_up
    elsif key == :down
      @current_piece.move_down
    end
  end
end
